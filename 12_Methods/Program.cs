// //Вид 1 (группа методов) 
// //- Hичего не принимают и ничего не возвращают
// void Method1() //void, ИмяМетода, пустые скобки
// {
//     Console.WriteLine("Автор: Иван Пупкин"); // тело
// }
// Method1(); //вызов метода (без вызова - не работает)
// // ИмяМетода, пустые скобки (без скобок - не работает)





// // Вид 2 - Что-то принимают, но ничего не возвращают
// void Method2(string msg) //void, идентификатор (имя), аргументы (в скобках)
// {
//     Console.WriteLine(msg); // тело
// }
// //Method2("Сообщение второго метода"); //вызов метода с указанием сообщения в скобках (если аргумент один)

// // Аргументы именнованные - явно указывется какому аргументу какое значение хотим указать
// // Применяются, если аргументов более одного
// // Пример: Method2(msg: "Сообщение второго метода"),еще - смотри ниже:
// void Method21(string msg, int count) //void, идентификатор (имя), аргументы (в скобках)
// {
//     int i = 0;
//     while (i < count)
//     {
//         Console.WriteLine(msg);
//         i++;
//     }
// }  
// //Method21("Сообщение метода 2.1", 4); //вывести сообщение в кавычках четыре раза
// Method21(count: 4, msg: "Вызов именнованных аргуметов"); 
// // при вызове именнованных аргументов, порядок их указания роли не играет!
// // Ctrl+C - исправить зацикливание программы





// //Вид 3 - Что-то возвращают, но ничего не принимают
// // обязательно - указать тип возвращаемых данных!!!
// int Method3() //аргументы не принимает - пустые скобки
// {
//     // обязательно использование оператора "return"!
//     return DateTime.Now.Year; //возвращает текущий год
// }
// //для вызова метода используем идентефикатор переменной и присваивание
// int year = Method3();
// Console.WriteLine(year); //печать переменной





// Вид 4 - Что-то принимают и что-то возвращают
// string Method4(int count, string text) //строку text повторить count раз
// {
//     int i = 0; //берем цикл
//     string result = String.Empty; //переменная для конечного результата (куда его будем класть)
//     // String.Empty - говорит, что result будет изначально - пустой строкой
//      while (i < count) // пока i меньше чем count
//     {
//         result = result + text; //класть в result result плюс текст
//         i++; //инкремент
//     }
//     return result; //указываем переменную (result) которую ожидаем получить из метода
// }

// string res = Method4(10, "z"); //создаем переменную для вызова метода
// //и указываем по порядку количество повторений (10) и сам текст (z)

// Console.WriteLine(res); //показать на экране результат

// //для изменения переменной сразу во всех местах - выделяем одну
// //правойМышью -> переименовать символ (или Fn+F2)





// //цикл "for" - цикл со счетчиком.
// //редактируем Вид4 с помощью цикла "for":
// string Method41(int count, string text)
// {
//     string result = String.Empty;    
//     for (int i = 0; i < count; i++) 
//     // for (инициализация счетчика; проверка условия; инкремент)
//     {
//         result = result + text; 
//     }
//     return result; 
// }
// string res = Method41(10, "z");
// Console.WriteLine(res);





// // Цикл в цикле (пример - вывод на экран таблицы умножения)
// for (int i = 2; i <= 10; i++) 
// //для автоматического построения цикла for выбрать в выпадающем окне for loop
// {
//     for (int j = 2; j <=10; j++) //можно считать телом метода для первого for
//     {
//         Console.WriteLine($"{i} x {j} = {i*j}");
//         //Интерполяция строк - в данном случае указывается как и что отображать
//     }
//     Console.WriteLine(); //отделяет пустой строкой проходы второго цикла
// } //Здесь получается, что первый метод делает 1 шаг цикла и по результату отрабатывает второй цикл
//     //потом первый метод отрабатывает 2 шаг цикла и по нему снова работает второй цикл, и т.д.





// // // // Работа с текстом
// // // // string s = "qwerty"
// // // //             012345
// // // // s[3] // r - чтобы обратится к 3 символу строки

// // // // Дан текст. В тексте нужно все пробелы заменить черточками, 
// // // // маленькие буквы “к” заменить большими “К”,
// // // // a большие “С” заменить маленькими “с”.
// // // // Ясна ли задача?

// string text = "— Я думаю, — сказал князь, улыбаясь, — что, "
//             + "ежели бы вас послали вместо нашего милого Винценгероде,"
//             + "вы бы взяли приступом согласие прусского короля. "
//             + "Вы так красноречивы. Вы дадите мне чаю?";


// string Replace(string text, char oldValue, char newValue)
// {
//     string result = String.Empty; //инициализация пустой строки

//     int length = text.Length; //длина массива
//     for (int i = 0; i < length; i++)
//     {
//         if(text[i] == oldValue) result = result + $"{newValue}";
//         // если текущий символ (text[i]) совпал с символом который надо заменить (oldValue) то в результат положить ($"{newValue}")
//         else result = result + $"{text[i]}";
//         // если нет, добавить в result текущий символ ($"{text[i]}")
//     }

//     return result;
// }

// string newText = Replace(text, ' ', '|');
// // показываем что на что меняем: пробелы на вертикальные черты
// Console.WriteLine(newText); //показать новый текст
// Console.WriteLine();
// newText = Replace(newText, 'к', 'К');
// //новая обработка полученного текста - меняем к на К
// Console.WriteLine(newText);





// Сортировка одномерного массива методом выбора/методом мин-мах/выбора макс/выбора мин
// Смысл: 
// 1.Найти позицию минимального элемента в неотсортированной части массива
// 2.Произвести обмен этого значения со значением первой неотсортированной позиции
// 3.Повторять пока есть неотсортированные элементы

int[] arr = { 1, 5, 4, 3, 2, 6, 7, 1, 1 }; //определяем массив

void PrintArray(int[] array) //вывод массива на экран
{
    int count = array.Length; //получение количества элементов

    for (int i = 0; i < count; i++)
    {
        Console.Write($"{array[i]} "); //вывод в одну строку через пробел
    }
    Console.WriteLine(); //пропуск строки
}

void SelectionSort(int[] array) //метод который будет упорядычевать весь массив
{
    for (int i = 0; i < array.Length - 1 ; i++) //пробежаться по всем элементам массива
    {  //выше -1стоит из-за j=i+1 что ниже(не совсем понял смысл)
        int minPosition = i; //запоминаем позицию рабочего элемента для которого будем производить какие-то действия
        
        for (int j = i + 1; j < array.Length; j++) //поиск минимального элемента
        { //начальная позиция i+1
            if(array[j] < array[minPosition]) minPosition = j;
        } //если текущий элемент j меньше предпологаемой позиции [minPosition], то сохраняем текущую позицию
        int temporary = array[i]; //рабочая позиция
        array[i] = array[minPosition]; //присваиваем найденный элемент
        array[minPosition] = temporary; //эти три строки - замена элемента
    }
}


PrintArray(arr);
SelectionSort(arr);

PrintArray(arr);
